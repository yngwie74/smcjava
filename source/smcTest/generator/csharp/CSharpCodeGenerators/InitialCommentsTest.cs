namespace SMC.Generator.CSharp.CSharpCodeGenerators
{
    using static System.Environment;

    using NUnit.Framework;

    [TestFixture]
    public class InitialCommentsTest : CSharpCodeGeneratorTest<InitialComments>
    {
        #region Test Methods

        [Test]
        public void WithErrorFunction()
        {
            const string ExpectedErrorHandling = "Err Func:  FSMError";

            var fsmbld = TestCSharpCodeGeneratorUtils.BuildDefaultTestConfig(usesExceptions: false);

            var actual = GenerateUsing(fsmbld);

            var expected = BuildComment(withErrorHandling: ExpectedErrorHandling);
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public void WithExceptionClass()
        {
            const string ExpectedErrorHandling = "Exception: Exception";

            var fsmbld = TestCSharpCodeGeneratorUtils.BuildDefaultTestConfig(usesExceptions: true);

            var actual = GenerateUsing(fsmbld);

            var expected = BuildComment(ExpectedErrorHandling);
            Assert.AreEqual(expected, actual);
        }

        [Test]
        public void WithVersion()
        {
            const string ExpectedErrorHandling = "Exception: Exception";
            const string ExpectedVersion = "1.23.4 build 234";

            var fsmbld = TestCSharpCodeGeneratorUtils.BuildDefaultTestConfig(usesExceptions: true);
            fsmbld.SetVersion(ExpectedVersion);

            var actual = GenerateUsing(fsmbld);

            var expected = BuildComment(
                withErrorHandling: ExpectedErrorHandling,
                withVersion: ExpectedVersion);

            Assert.AreEqual(expected, actual);
        }

        #endregion

        #region Helper Methods

        private static string BuildComment(string withErrorHandling, string withVersion = "")
        {
            return $"// <auto-generated />{NewLine}" +
                $"//-----------------------------------------------------------------------{NewLine}" +
                $"// FSM:       TurnStyle{NewLine}" +
                $"// Context:   TurnStyleContext{NewLine}" +
                $"// {withErrorHandling}{NewLine}" +
                $"// Version:   {withVersion}{NewLine}" +
                $"//-----------------------------------------------------------------------{NewLine}" +
                $"{NewLine}";
        }

        #endregion
    }
}