PARSER_BEGIN(SMParser)

using System;

using SMC.parser.iface;

public class SMParser
{
    SMParserInterface pi;
    int transactionAction = 1;
    int entryAction = 2;
    int exitAction = 3;
}

PARSER_END(SMParser)

SKIP :
{
    " "
  | "\t"
  | "\n"
  | "\r"
  | "\r\n"
  | <"//" (~["\n","\r"])*>
}

TOKEN [IGNORE_CASE]:
{
    < FSMNAME: "FSMName" >
  | < CONTEXT: "Context" >
  | < EXCEPTION: "Exception" >
  | < INITIAL: "Initial" >
  | < GENERATOR: "FSMGenerator" >
  | < PRAGMA: "Pragma" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | < VERSION: "Version" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
}

TOKEN [IGNORE_CASE]:
{
    < ID: ["a"-"z"] ( ["a"-"z","_","0"-"9"])* >
  | < GENERATOR_ID:["a"-"z"] ( ["a"-"z","_","0"-"9","."])* > 
}

void parseFSM( SMParserInterface s ) :
{}
{
    { pi = s; }
    parseHeader() "{" parseStates() "}" <EOF>   
    { 
        pi.processFSM();
    }
}

void parseHeader() :
{  Token t; }
{
  ( 
    <FSMNAME> t=<ID>
    {
        pi.setFSMName( t.image );
    }
  | <CONTEXT> t=<ID>
    {
        pi.setContextName( t.image );
    }
  | <EXCEPTION> t=<ID>
    {
        pi.setException( t.image );
    }
  | <INITIAL> t=<ID>
    {
        pi.setInitialState( t.image );
    }
  | <GENERATOR> ( t=<ID> | t=<GENERATOR_ID> )
    {
	pi.setFSMGenerator( t.image );
    }
  | t=<VERSION>
    {
        string v = t.image;	
        try
        {
            v = v.Substring(7);
            v = v.Trim();
            pi.setVersion( v );
        }
        catch (System.IndexOutOfRangeException e)
        { pi.setVersion(""); }
    }
  | t=<PRAGMA>
    {
        string p = t.image;
        try
        {
            p = p.Substring(6);
            p = p.Trim();
            pi.addPragma( p );
        }
        catch (System.IndexOutOfRangeException e)
        {}
    }
  )*
  {}
}

void parseStates() :
{}
{
  ( stateDefinition() (entryOrExitAction())* transitionSet() )*
  {}
}

void stateDefinition() :
{ 
  Token state1 = null;
  Token state2 = null;
}
{
    "(" state1=<ID> ")" [(":" state2=<ID>)]
    {
        if( state2 == null )
            pi.addSuperState( state1.image, state1.beginLine);
        else
            pi.addSuperSubState( state1.image, state2.image, state1.beginLine);
    }
  | state1=<ID> [(":" state2=<ID>)]
    {
        if( state2 == null )
            pi.addState( state1.image, state1.beginLine); 
        else
	    pi.addSubState( state1.image, state2.image, state1.beginLine);
    }
}

void transitionSet() :
{}
{
   "{" (transition())* "}"
}

void transition() :
{
  Token _event;
  Token state;
}
{
   ( LOOKAHEAD(2) 
    _event=<ID> state=<ID>
    {
        pi.addTransition( _event.image, state.image, _event.beginLine );
    }
  | _event=<ID> "*"
    {
        pi.addInternalTransition( _event.image, _event.beginLine );
    })
  {
      actionSet(transactionAction);
  }
}

void entryOrExitAction() :
{}
{
    "<" 
    {
        actionSet(entryAction);
    }
  | ">" 
    {
       actionSet(exitAction);
    }
}

void actionSet(int type) :
{}
{
    action(type)
  | "{" (action(type))* "}"
}

void action(int type) :
{
    Token t;
}
{
    t=<ID>
    {
	if( type == transactionAction )
            pi.addAction(t.image, t.beginLine);
        else if( type == entryAction )
            pi.addEntryAction( t.image, t.beginLine);
        else if( type == exitAction )
            pi.addExitAction( t.image, t.beginLine);
    }
}

